{"version":3,"file":"index.umd.js","sources":["../src/firebaseDataProvider.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/firebaseAuthProvider.ts","../src/firebaseRealtimeSaga.ts"],"sourcesContent":["import * as firebase from \"firebase/app\";\nimport rp from \"request-promise\";\nimport \"firebase/firestore\";\n\nimport {\n  CREATE,\n  DELETE,\n  DELETE_MANY,\n  GET_LIST,\n  GET_MANY,\n  GET_MANY_REFERENCE,\n  GET_ONE,\n  UPDATE,\n  UPDATE_MANY\n} from \"react-admin\";\nimport { Observable } from \"rxjs\";\n\nexport interface IResource {\n  path: string;\n  collection: firebase.firestore.CollectionReference;\n  observable: Observable<{}>;\n  list: Array<{}>;\n}\n\n// UTILS\n\nfunction isEmptyObj(obj) {\n  return JSON.stringify(obj) == \"{}\";\n}\n\nfunction log(description: string, obj: {}) {\n  if (ISDEBUG) {\n    console.log(description, obj);\n  }\n}\n\nvar ISDEBUG = false;\n\nclass FirebaseClient {\n  private db: firebase.firestore.Firestore;\n  private app: firebase.app.App;\n  private resources: {\n    [resourceName: string]: IResource;\n  } = {};\n\n  constructor(firebaseConfig: {}) {\n    if (!firebase.apps.length) {\n      this.app = firebase.initializeApp(firebaseConfig);\n    } else {\n      this.app = firebase.app();\n    }\n    this.db = this.app.firestore();\n  }\n\n  private parseFireStoreDocument(\n    doc: firebase.firestore.QueryDocumentSnapshot\n  ): {} {\n    const data = doc.data();\n    Object.keys(data).forEach(key => {\n      const value = data[key];\n      if (value && value.toDate && value.toDate instanceof Function) {\n        data[key] = value.toDate().toISOString();\n      }\n    });\n    // React Admin requires an id field on every document,\n    // So we can just using the firestore document id\n    return { id: doc.id, ...data };\n  }\n\n  public async initPath(path: string): Promise<void> {\n    return new Promise(resolve => {\n      const hasBeenInited = this.resources[path];\n      if (hasBeenInited) {\n        return resolve();\n      }\n      const collection = this.db.collection(path);\n      const observable = this.getCollectionObservable(collection);\n      observable.subscribe(\n        (querySnapshot: firebase.firestore.QuerySnapshot) => {\n          const newList = querySnapshot.docs.map(\n            (doc: firebase.firestore.QueryDocumentSnapshot) =>\n              this.parseFireStoreDocument(doc)\n          );\n          this.setList(newList, path);\n          // The data has been set, so resolve the promise\n          resolve();\n        }\n      );\n      const list: Array<{}> = [];\n      const r: IResource = {\n        collection,\n        list,\n        observable,\n        path\n      };\n      this.resources[path] = r;\n      log(\"initPath\", { path, r, \"this.resources\": this.resources });\n    });\n  }\n\n  private async getFirebaseSource(myResource: string): Promise<Array<{}>> {\n    return new Promise((resolve, reject) => {\n      var sourceRef = firebase.firestore().collection(myResource);\n      var query = sourceRef\n        //.where(\"published\", \"==\", true)\n        .get()\n        .then(snapshot => {\n          if (snapshot.empty) {\n            resolve([]);\n          }\n          let result = [];\n          snapshot.forEach(doc => {\n            result.push({ id: doc.id, ...doc.data() });\n          });\n          resolve(result);\n        })\n        .catch(err => {\n          reject();\n        });\n    });\n  }\n\n  private async insertDataInFirebaseWithId(\n    resourceName: string,\n    params: IParamsCreate\n  ): Promise<{ id }> {\n    return new Promise((resolve, reject) => {\n      const myId = params.data[\"myId\"].toLowerCase();\n      var sourceRef = firebase\n        .firestore()\n        .collection(resourceName)\n        .doc(myId);\n      delete params.data[\"myId\"];\n      var query = sourceRef\n        .set({\n          ...params.data,\n          createdate: firebase.firestore.FieldValue.serverTimestamp(),\n          lastupdate: firebase.firestore.FieldValue.serverTimestamp(),\n          createdByUid: firebase.auth().currentUser.uid,\n          updatedByUid: firebase.auth().currentUser.uid,\n          createdByEmail: firebase.auth().currentUser.email,\n          updatedByEmail: firebase.auth().currentUser.email\n        })\n        .then(() => {\n          resolve({ id: myId });\n        })\n        .catch(err => {\n          reject();\n        });\n    });\n  }\n\n  private async addDataInFirebase(\n    resourceName: string,\n    params: IParamsCreate\n  ): Promise<{ id }> {\n    return new Promise((resolve, reject) => {\n      var sourceRef = firebase.firestore().collection(resourceName);\n      var query = sourceRef\n        .add({\n          ...params.data,\n          createdate: firebase.firestore.FieldValue.serverTimestamp(),\n          lastupdate: firebase.firestore.FieldValue.serverTimestamp(),\n          createdByUid: firebase.auth().currentUser.uid,\n          updatedByUid: firebase.auth().currentUser.uid,\n          createdByEmail: firebase.auth().currentUser.email,\n          updatedByEmail: firebase.auth().currentUser.email\n        })\n        .then(ref => {\n          resolve({ id: ref.id });\n        })\n        .catch(err => {\n          reject();\n        });\n    });\n  }\n\n  private async updateDataInFirebase(\n    resourceName: string,\n    params: IParamsCreate,\n    myId: string\n  ): Promise<{ id }> {\n    return new Promise((resolve, reject) => {\n      var sourceRef = firebase\n        .firestore()\n        .collection(resourceName)\n        .doc(myId);\n      var query = sourceRef\n        .set({\n          ...params.data,\n          lastupdate: firebase.firestore.FieldValue.serverTimestamp(),\n          updatedByUid: firebase.auth().currentUser.uid,\n          updatedByEMail: firebase.auth().currentUser.email\n        })\n        .then(ref => {\n          resolve({ id: myId });\n        })\n        .catch(err => {\n          reject();\n        });\n    });\n  }\n\n  public async apiGetList(\n    resourceName: string,\n    params: IParamsGetList\n  ): Promise<IResponseGetList> {\n    const r = await this.tryGetResource(resourceName);\n    const data = r.list;\n    const { field = \"id\", order = \"asc\" } = params.sort || {};\n    this.sortArray(\n      data,\n      field,\n      order.toString().toLowerCase() == \"asc\" ? \"asc\" : \"desc\"\n    );\n    log(\"apiGetList\", { resourceName, resource: r, params });\n\n    let filteredData = this.filterArray(data, params.filter || {});\n\n    if (\n      [\n        \"analysisActionsUsers\",\n        \"analysisDataUsers\",\n        \"analysisProductionUsers\",\n        \"analysisSystemUsers\",\n        \"analysisTeamUsers\"\n      ].indexOf(resourceName) !== -1\n    ) {\n      const filteredDataUsers = this.filterArray(data, params.filter || {});\n      const questionsInConnectedUser = filteredDataUsers.filter(\n        (item: {published: boolean, createdByUid: string }) => {\n          if (item.createdByUid === firebase.auth().currentUser.uid && item.published === true) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      );\n      const datar = await this.getFirebaseSource(\n        resourceName.replace(\"Users\", \"\")\n      );\n      const questionsInTemplate = this.filterArray(datar, params.filter || {}).filter(\n        (item: {published: boolean}) => {\n          if (item.published === true) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      );\n      const questions2AddFromTemplate = questionsInTemplate\n        .filter((item: {id: string }) => {\n          const filteredInTemplate = questionsInConnectedUser.filter(\n            (val: { questionId: string }) => {\n              if (val.questionId === item.id) {\n                return true;\n              } else {\n                return false;\n              }\n            }\n          );\n          if (filteredInTemplate.length < 1) {\n            return true;\n          } else {\n            return false;\n          }\n        })\n        .map((doc: firebase.firestore.QueryDocumentSnapshot) => {\n          return { ...doc, questionId: doc.id };\n        });\n      filteredData = [\n        ...questionsInConnectedUser,\n        ...questions2AddFromTemplate\n      ];\n    }\n\n    const { page = 1, perPage = -1 } = params.pagination || {};\n    const pageStart = (page - 1) * perPage;\n    const pageEnd = pageStart + perPage;\n    const dataPage = params.pagination\n      ? filteredData.slice(pageStart, pageEnd)\n      : filteredData;\n    const total = filteredData.length;\n    return {\n      data: dataPage,\n      total\n    };\n  }\n\n  public async apiGetOne(\n    resourceName: string,\n    params: IParamsGetOne\n  ): Promise<IResponseGetOne> {\n    let data;\n    if (\n      [\n        \"analysisActionsUsers\",\n        \"analysisDataUsers\",\n        \"analysisProductionUsers\",\n        \"analysisSystemUsers\",\n        \"analysisTeamUsers\"\n      ].indexOf(resourceName) !== -1\n    ) {\n      let r = await this.getFirebaseSource(resourceName);\n      data = r.filter((val: { id: string }) => val.id === params.id);\n      if (data.length < 1) {\n        r = await this.getFirebaseSource(resourceName.replace(\"Users\", \"\"));\n        data = r\n          .filter((val: { id: string }) => val.id === params.id)\n          .map((doc: firebase.firestore.QueryDocumentSnapshot) => {\n            return { ...doc, questionId: doc.id };\n          });\n      }\n    } else if (resourceName === \"users\" && !params.id) {\n      let rr = await this.tryGetResource(resourceName);\n      data = rr.list.filter(\n        (val: { id: string }) => val.id === firebase.auth().currentUser.uid\n      );\n    } else if (resourceName === \"profile\") {\n      let rr = await this.getFirebaseSource(\"users\");\n      let prevData = rr.filter(\n        (val: { id: string }) => val.id === firebase.auth().currentUser.uid\n      );\n      data = [];\n      prevData.forEach(doc => {\n        data.push({ ...doc, id: params.id });\n      });\n    } else {\n      let rr = await this.tryGetResource(resourceName);\n      data = rr.list.filter((val: { id: string }) => val.id === params.id);\n    }\n    if (data.length < 1) {\n      throw new Error(\n        \"react-admin-firebase: No id found matching: \" + params.id\n      );\n    }\n    return { data: data.pop() };\n  }\n\n  public async apiCreate(\n    resourceName: string,\n    params: IParamsCreate\n  ): Promise<IResponseCreate> {\n    const r = await this.tryGetResource(resourceName);\n    log(\"apiCreate\", { resourceName, resource: r, params });\n    const doc = params.data[\"myId\"]\n      ? await this.insertDataInFirebaseWithId(resourceName, params)\n      : await r.collection.add({\n          ...params.data,\n          createdate: firebase.firestore.FieldValue.serverTimestamp(),\n          lastupdate: firebase.firestore.FieldValue.serverTimestamp(),\n          createdByUid: firebase.auth().currentUser.uid,\n          updatedByUid: firebase.auth().currentUser.uid,\n          createdByEmail: firebase.auth().currentUser.email,\n          updatedByEmail: firebase.auth().currentUser.email\n        });\n    return {\n      data: {\n        ...params.data,\n        id: doc.id\n      }\n    };\n  }\n\n  public async apiUpdate(\n    resourceName: string,\n    params: IParamsUpdate\n  ): Promise<IResponseUpdate> {\n\t  \n\tlet options = {\n    method: 'POST',\n    uri: 'https://us-central1-bandwitt-techreach.cloudfunctions.net/widgets/calculateScoring',\n    body: {\n        source: resourceName,\n\t\tid: firebase.auth().currentUser.uid\n\t\t\n    },\n    json: true // Automatically stringifies the body to JSON\n\t};  \n    const id = params.id;\n    delete params.data.id;\n    let r;\n    if (resourceName === \"profile\") {\n      r = {};\n      r.list = await this.getFirebaseSource(\"users\");\n    } else {\n      r = await this.tryGetResource(resourceName);\n    }\n    log(\"apiUpdate\", { resourceName, resource: r, params });\n\n    var data2Work = {\n      ...params.data,\n      lastupdate: firebase.firestore.FieldValue.serverTimestamp(),\n      updatedByUid: firebase.auth().currentUser.uid,\n      updatedByEMail: firebase.auth().currentUser.email\n    };\n\n    if (\n      [\n        \"analysisActionsUsers\",\n        \"analysisDataUsers\",\n        \"analysisProductionUsers\",\n        \"analysisSystemUsers\",\n        \"analysisTeamUsers\"\n      ].indexOf(resourceName) !== -1\n    ) {\n      const data = r.list.filter((val: { id: string }) => val.id === id);\n      if (data.length < 1) {\n        params.data[\"questionId\"] = id;\n        const myDataAdded = await this.addDataInFirebase(resourceName, params);\n\t\tconst updateScoring = await rp(options);\n        return {\n          data: {\n            ...params.data,\n            id\n          }\n        };\n      } else {\n        const myDataIUpdated = await this.updateDataInFirebase(\n          resourceName,\n          params,\n          id\n        );\n\t\tconst updateScoring = await rp(options);\n        return {\n          data: {\n            ...params.data,\n            id\n          }\n        };\n      }\n    } else {\n      if (resourceName === \"profile\") {\n        const myDataIUpdated = await this.updateDataInFirebase(\n          \"users\",\n          params,\n          firebase.auth().currentUser.uid\n        );\n      }\n\t  else if(resourceName === \"users\") {\n\t\toptions.body.id = id;\n\t\tconst updateScoring = await rp(options);\n\t\tconst resUpdateDefault = await r.collection.doc(id).update(data2Work);\t\t\n\t  }\n\n\t  else {\n        const resUpdateDefault = await r.collection.doc(id).update(data2Work);\n      }\n      return {\n        data: {\n          ...data2Work,\n          id\n        }\n      };\n    }\n  }\n\n  public async apiUpdateMany(\n    resourceName: string,\n    params: IParamsUpdateMany\n  ): Promise<IResponseUpdateMany> {\n    delete params.data.id;\n    const r = await this.tryGetResource(resourceName);\n    log(\"apiUpdateMany\", { resourceName, resource: r, params });\n    const returnData = [];\n    for (const id of params.ids) {\n      r.collection.doc(id).update({\n        ...params.data,\n        lastupdate: firebase.firestore.FieldValue.serverTimestamp(),\n        updatedByUid: firebase.auth().currentUser.uid,\n        updatedByEmail: firebase.auth().currentUser.email\n      });\n      returnData.push({\n        ...params.data,\n        id\n      });\n      if (\n        [\n          \"analysisActionsUsers\",\n          \"analysisDataUsers\",\n          \"analysisProductionUsers\",\n          \"analysisSystemUsers\",\n          \"analysisTeamUsers\"\n        ].indexOf(resourceName) !== -1\n      ) {\n        const data = r.list.filter((val: { id: string }) => val.id === id);\n        if (data.length < 1) {\n          firebase\n            .firestore()\n            .collection(resourceName)\n            .add({\n              ...params.data,\n              createdate: firebase.firestore.FieldValue.serverTimestamp(),\n              createdByUid: firebase.auth().currentUser.uid,\n              createdByEmail: firebase.auth().currentUser.email\n            });\n        } else {\n          firebase\n            .firestore()\n            .collection(resourceName)\n            .doc(id)\n            .update({\n              ...params.data,\n              lastupdate: firebase.firestore.FieldValue.serverTimestamp(),\n              updatedByUid: firebase.auth().currentUser.uid,\n              updatedByEmail: firebase.auth().currentUser.email\n            });\n        }\n      }\n    }\n    return {\n      data: returnData\n    };\n  }\n\n  public async apiDelete(\n    resourceName: string,\n    params: IParamsDelete\n  ): Promise<IResponseDelete> {\n    const r = await this.tryGetResource(resourceName);\n    log(\"apiDelete\", { resourceName, resource: r, params });\n    r.collection.doc(params.id).delete();\n    return {\n      data: params.previousData\n    };\n  }\n\n  public async apiDeleteMany(\n    resourceName: string,\n    params: IParamsDeleteMany\n  ): Promise<IResponseDeleteMany> {\n    const r = await this.tryGetResource(resourceName);\n    log(\"apiDeleteMany\", { resourceName, resource: r, params });\n    const returnData = [];\n    const batch = this.db.batch();\n    for (const id of params.ids) {\n      batch.delete(r.collection.doc(id));\n      returnData.push({ id });\n    }\n    batch.commit();\n    return { data: returnData };\n  }\n\n  public async apiGetMany(\n    resourceName: string,\n    params: IParamsGetMany\n  ): Promise<IResponseGetMany> {\n    let r;\n    const ids = new Set(params.ids);\n    let matches;\n\n    if (\n      [\n        \"analysisActionsUsers\",\n        \"analysisDataUsers\",\n        \"analysisProductionUsers\",\n        \"analysisSystemUsers\",\n        \"analysisTeamUsers\"\n      ].indexOf(resourceName) !== -1\n    ) {\n      r = await this.getFirebaseSource(resourceName);\n      matches = r.filter(item => ids.has(item[\"id\"]));\n      if (matches.length < 1) {\n        r = await this.getFirebaseSource(resourceName.replace(\"Users\", \"\"));\n        matches = r.filter(item => ids.has(item[\"id\"]));\n      }\n    } else {\n      r = await this.tryGetResource(resourceName);\n      matches = r.list.filter(item => ids.has(item[\"id\"]));\n    }\n\n    return {\n      data: matches\n    };\n  }\n\n  public async apiGetManyReference(\n    resourceName: string,\n    params: IParamsGetManyReference\n  ): Promise<IResponseGetManyReference> {\n    let data;\n    const targetField = params.target;\n    const targetValue = params.id;\n    let matches;\n\n    if (\n      [\n        \"analysisActionsUsers\",\n        \"analysisDataUsers\",\n        \"analysisProductionUsers\",\n        \"analysisSystemUsers\",\n        \"analysisTeamUsers\"\n      ].indexOf(resourceName) !== -1\n    ) {\n      data = await this.getFirebaseSource(resourceName);\n      matches = data.filter(val => val[targetField] === targetValue);\n      if (matches.length < 1) {\n        data = await this.getFirebaseSource(resourceName.replace(\"Users\", \"\"));\n        matches = data.filter(val => val[targetField] === targetValue);\n      }\n    } else {\n      let r = await this.tryGetResource(resourceName);\n      data = r.list;\n      matches = data.filter(val => val[targetField] === targetValue);\n    }\n\n    if (params.sort != null) {\n      const { field, order } = params.sort;\n      if (order === \"ASC\") {\n        this.sortArray(data, field, \"asc\");\n      } else {\n        this.sortArray(data, field, \"desc\");\n      }\n    }\n    const pageStart = (params.pagination.page - 1) * params.pagination.perPage;\n    const pageEnd = pageStart + params.pagination.perPage;\n\n    const dataPage = matches.slice(pageStart, pageEnd);\n    const total = matches.length;\n    return { data: dataPage, total };\n  }\n\n  public GetResource(resourceName: string): IResource {\n    return this.tryGetResource(resourceName);\n  }\n\n  private sortArray(data: Array<{}>, field: string, dir: \"asc\" | \"desc\"): void {\n    data.sort((a: {}, b: {}) => {\n      const aValue = a[field] ? a[field].toString().toLowerCase() : \"\";\n      const bValue = b[field] ? b[field].toString().toLowerCase() : \"\";\n      if (aValue > bValue) {\n        return dir === \"asc\" ? -1 : 1;\n      }\n      if (aValue < bValue) {\n        return dir === \"asc\" ? 1 : -1;\n      }\n      return 0;\n    });\n  }\n\n  private filterArray(\n    data: Array<{}>,\n    filterFields: { [field: string]: string }\n  ): Array<{}> {\n    if (isEmptyObj(filterFields)) {\n      return data;\n    }\n    const fieldNames = Object.keys(filterFields);\n    return data.filter(item =>\n      fieldNames.reduce((previousMatched, fieldName) => {\n        const fieldSearchText = filterFields[fieldName].toLowerCase();\n        const dataFieldValue = item[fieldName];\n        if (dataFieldValue == null) {\n          return false;\n        }\n        const currentIsMatched = dataFieldValue\n          .toLowerCase()\n          .includes(fieldSearchText);\n        return previousMatched || currentIsMatched;\n      }, false)\n    );\n  }\n\n  private async setList(\n    newList: Array<{}>,\n    resourceName: string\n  ): Promise<void> {\n    const resource = await this.tryGetResource(resourceName);\n    resource.list = newList;\n  }\n\n  private tryGetResource(resourceName: string): IResource {\n    const resource: IResource = this.resources[resourceName];\n    if (!resource) {\n      throw new Error(\n        `react-admin-firebase: Cant find resource: \"${resourceName}\"`\n      );\n    }\n    return resource;\n  }\n\n  private getCollectionObservable(\n    collection: firebase.firestore.CollectionReference\n  ): Observable<firebase.firestore.QuerySnapshot> {\n    const observable: Observable<\n      firebase.firestore.QuerySnapshot\n    > = Observable.create((observer: any) => collection.onSnapshot(observer));\n    // LOGGING\n    return observable;\n  }\n}\n\nexport let fb: FirebaseClient;\n\nexport default function FirebaseProvider(config: {}) {\n  if (!config) {\n    throw new Error(\n      \"Please pass the Firebase config.json object to the FirebaseDataProvider\"\n    );\n  }\n  ISDEBUG = config[\"debug\"];\n  fb = new FirebaseClient(config);\n  async function providerApi(\n    type: string,\n    resourceName: string,\n    params: any\n  ): Promise<any> {\n    await fb.initPath(resourceName);\n    switch (type) {\n      case GET_MANY:\n        return fb.apiGetMany(resourceName, params);\n      case GET_MANY_REFERENCE:\n        return fb.apiGetManyReference(resourceName, params);\n      case GET_LIST:\n        return fb.apiGetList(resourceName, params);\n      case GET_ONE:\n        return fb.apiGetOne(resourceName, params);\n      case CREATE:\n        return fb.apiCreate(resourceName, params);\n      case UPDATE:\n        return fb.apiUpdate(resourceName, params);\n      case UPDATE_MANY:\n        return fb.apiUpdateMany(resourceName, params);\n      case DELETE:\n        return fb.apiDelete(resourceName, params);\n      case DELETE_MANY:\n        return fb.apiDeleteMany(resourceName, params);\n      default:\n        return {};\n    }\n  }\n  return providerApi;\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar iteratorSymbol = Symbol.iterator;\n\t\tif (iteratorSymbol && (iteratorSymbol in target)) {\n\t\t\tvar iterator = target[iteratorSymbol](), step, pact, reject;\n\t\t\tfunction _cycle(result) {\n\t\t\t\ttry {\n\t\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pact) {\n\t\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpact = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_cycle();\n\t\t\tif (iterator.return) {\n\t\t\t\tvar _fixup = function(value) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\t\titerator.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (pact && pact.then) {\n\t\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t_fixup();\n\t\t\t}\n\t\t\treturn pact;\n\t\t}\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"value is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar asyncIteratorSymbol = Symbol.asyncIterator;\n\t\tif (asyncIteratorSymbol && (asyncIteratorSymbol in target)) {\n\t\t\tvar pact = new _Pact();\n\t\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\treturn pact;\n\t\t\tfunction _resumeAfterBody(result) {\n\t\t\t\tif (check && !check()) {\n\t\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t\t}\n\t\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\t}\n\t\t\tfunction _resumeAfterNext(step) {\n\t\t\t\tif (step.done) {\n\t\t\t\t\t_settle(pact, 1);\n\t\t\t\t} else {\n\t\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction _reject(error) {\n\t\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t\t}\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t\tthis[Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))] = function() {\n\t\t\treturn this;\n\t\t};\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nimport {\n  AUTH_LOGIN,\n  AUTH_LOGOUT,\n  AUTH_ERROR,\n  AUTH_CHECK,\n  AUTH_GET_PERMISSIONS\n} from \"react-admin\";\n\nimport { Observable } from \"rxjs\";\n\nfunction log(description: string, obj?: {}) {\n  if (ISDEBUG) {\n    console.log(\"FirebaseAuthProvider: \" + description, obj);\n  }\n}\n\nvar ISDEBUG = false;\n\n\nclass AuthClient {\n  app: firebase.app.App;\n  auth: firebase.auth.Auth;\n  db: firebase.firestore.Firestore;\n\n  constructor(firebaseConfig: {}) {\n    log(\"Auth Client: initializing...\");\n    if (!firebase.apps.length) {\n      this.app = firebase.initializeApp(firebaseConfig);\n    } else {\n      this.app = firebase.app();\n    }\n    this.auth = firebase.auth();\n\tthis.db = this.app.firestore();\n  }\n\n  async HandleAuthLogin(params) {\n    const { username, password } = params;\n    console.log('HandleAuthLogin......');\n    try {\n\t\tconsole.log('no hay token,signInWithEmailAndPassword');\n      const user = await this.auth.signInWithEmailAndPassword(\n        username,\n        password\n      );\n\t  log(\"HandleAuthLogin: user sucessfully logged in\", { user });\n\n      \n    } catch (e) {\n      log(\"HandleAuthLogin: invalid credentials\", { params });\n      throw new Error(\"Login error: invalid credentials\");\n    }\n  }\n\n  async HandleAuthLogout(params) {\n\tconsole.log('HandleAuthLogout');\n    await this.auth.signOut();\n  }\n\n  async HandleAuthError(params) {}\n\n  async HandleAuthCheck(params) {\n    try {\n      const user = await this.getUserLogin();\n      log(\"HandleAuthCheck: user is still logged in\", { user });\n      console.log(\"HandleAuthCheck: user is still logged in\", { user });\n    } catch (e) {\n      log(\"HandleAuthCheck: \", { e });\n      console.log(\"HandleAuthCheck: \", { e });\n      return Promise.reject();\n    }\n  }\n\n  async getUserLogin() {\n    return new Promise((resolve, reject) => {\n      this.auth.onAuthStateChanged(user => {\n        if (user) {\n          resolve(user);\n        } else {\n          reject(\"User not logged in\");\n        }\n      });\n    });\n  }\n  \n  async getPermissions() {\n    return new Promise((resolve, reject) => {\n      this.auth.onAuthStateChanged(user => {\n        if (user) {\n\t\t  var userRef = firebase.firestore().collection('users').doc(user.uid || '');\n\t\t  var getDoc = userRef.get()\n\t\t  .then(doc => {\n\t\t\tif (!doc.exists) {\n\t\t\t  resolve('user');\n\t\t\t} else {\n\t\t\t  resolve(doc.data().isAdmin?'admin':'user');\n\t\t\t}\n\t\t  })\n\t\t  .catch(err => {\n\t\t\tconsole.log('Error getting document', err);\n\t\t\treject();\n\t\t  }); \n        } else {\n\t\t  console.log('no hay permisos......');\n\t\t  resolve('guest');\n          //reject(\"User not logged in\");\n        }\n      });\n    });\n  }  \n  \n  async getUserPermissions(email) {\n    return new Promise((resolve, reject) => {\n\t\tvar userRef = firebase.firestore().collection('users').doc(email);\n\t\tvar getDoc = userRef.get()\n\t\t  .then(doc => {\n\t\t\tif (!doc.exists) {\n\t\t\t  resolve(false);\n\t\t\t} else {\n\t\t\t  resolve(doc.data().isAdmin);\n\t\t\t}\n\t\t  })\n\t\t  .catch(err => {\n\t\t\tconsole.log('Error getting document', err);\n\t\t\treject();\n\t\t  });\n\t\t\t});\n  }\n  \n  \n}\n\nfunction SetUpAuth(config: {}) {\n  if (!config) {\n    throw new Error(\n      \"Please pass the Firebase config.json object to the FirebaseAuthProvider\"\n    );\n  }\n  ISDEBUG = config[\"debug\"];\n  const auth = new AuthClient(config);\n\n  return async function(type: string, params: {}) {\n    log(\"Auth Event: \", { type, params });\n\n    {\n      switch (type) {\n        case AUTH_LOGIN:\n          await auth.HandleAuthLogin(params);\n        case AUTH_LOGOUT:\n          await auth.HandleAuthLogout(params);\n        case AUTH_ERROR:\n          await auth.HandleAuthError(params);\n        case AUTH_CHECK:\n          await auth.HandleAuthCheck(params);\n        case AUTH_GET_PERMISSIONS:\n          return await auth.getPermissions();\n        default:\n          throw new Error(\"Unhandled auth type:\" + type);\n      }\n    }\n  };\n}\n\nexport default SetUpAuth;\n","import realtimeSaga from \"ra-realtime\";\nimport {\n  fb\n} from './firebaseDataProvider';\n\nconst observeRequest = (dataProvider, options) => (type, resource, params) => {  \n  // If the paths are explicitly set in options\n  if (options && Array.isArray(options.watch) && !options.watch.includes(resource)) {\n    // Then don't observe it, if it's not set\n    return;\n  }\n  if (options && Array.isArray(options.dontwatch) && options.dontwatch.includes(resource)) {\n    // Then don't observe it, if it's not set\n    return;\n  }\n\n  // Use your apollo client methods here or sockets or whatever else including the following very naive polling mechanism\n  return {\n    subscribe(observer) {\n      const resourceObj = fb.GetResource(resource);\n      const sub = resourceObj.observable.subscribe(() => {\n        dataProvider(type, resource, params)\n          .then(results => observer.next(results)) // New data received, notify the observer\n          .catch(error => observer.error(error)); // Ouch, an error occured, notify the observer\n      });\n\n      const subscription = {\n        unsubscribe() {\n          sub.unsubscribe();\n          // Notify the saga that we cleaned up everything\n          // observer.complete();\n          // ^ THIS FAILS FRAMEWORK ISSUE\n        }\n      };\n\n      return subscription;\n    }\n  };\n};\n\nexport default (dataProvider, options) => {\n  return realtimeSaga(observeRequest(dataProvider, options));\n}\n"],"names":["log","description","obj","ISDEBUG","console","fb","FirebaseClient","constructor","firebaseConfig","app","firebase","length","db","this","firestore","_catch","body","recover","result","e","then","parseFireStoreDocument","doc","data","keys","forEach","key","value","toDate","Function","toISOString","Object","id","initPath","path","Promise","resolve","_this","resources","collection","observable","getCollectionObservable","subscribe","querySnapshot","newList","docs","map","setList","r","getFirebaseSource","myResource","reject","get","snapshot","empty","push","catch","err","insertDataInFirebaseWithId","resourceName","params","myId","toLowerCase","sourceRef","set","createdate","FieldValue","serverTimestamp","currentUser","uid","email","updatedByEmail","addDataInFirebase","add","ref","updateDataInFirebase","lastupdate","updatedByEMail","apiGetList","_this2","tryGetResource","pagination","pageStart","page","perPage","filteredData","slice","list","sort","sortArray","field","order","toString","filterArray","filter","indexOf","questionsInConnectedUser","item","createdByUid","published","replace","datar","questions2AddFromTemplate","val","questionId","apiGetOne","Error","pop","_this3","rr","prevData","apiCreate","_this4","apiUpdate","data2Work","_this5","myDataAdded","rp","options","updateScoring","myDataIUpdated","update","apiUpdateMany","returnData","const","createdByEmail","ids","apiDelete","delete","previousData","apiDeleteMany","_this8","batch","commit","apiGetMany","matches","Set","_this9","has","apiGetManyReference","targetField","target","targetValue","_this10","GetResource","dir","a","b","aValue","bValue","filterFields","JSON","stringify","fieldNames","reduce","previousMatched","fieldName","fieldSearchText","dataFieldValue","currentIsMatched","includes","resource","Observable","create","observer","onSnapshot","AuthClient","auth","HandleAuthLogin","signInWithEmailAndPassword","username","password","user","HandleAuthLogout","signOut","HandleAuthError","HandleAuthCheck","getUserLogin","onAuthStateChanged","getPermissions","exists","isAdmin","getUserPermissions","dataProvider","realtimeSaga","type","Array","isArray","watch","dontwatch","sub","results","next","error","unsubscribe","observeRequest","config","GET_MANY","GET_MANY_REFERENCE","GET_LIST","GET_ONE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","AUTH_LOGIN","AUTH_LOGOUT","AUTH_ERROR","AUTH_CHECK","AUTH_GET_PERMISSIONS"],"mappings":"8gBA8BA,SAASA,EAAIC,EAAqBC,GAC5BC,GACFC,QAAQJ,IAAIC,EAAaC,6FAI7B,IAgpBWG,EAhpBPF,GAAU,EAERG,EAOJC,SAAYC,kBAFR,QAMKC,IAHFC,OAAcC,OAGND,QAFAA,gBAAuBF,QAI/BI,GAAKC,KAAKJ,IAAIK,aCigBhB,SAASC,EAAOC,EAAMC,GAC5B,IACC,IAAIC,EAASF,IACZ,MAAMG,GACP,OAAOF,EAAQE,GAEhB,OAAID,GAAUA,EAAOE,KACbF,EAAOE,UAAK,EAAQH,GAErBC,EC/iBR,SAASlB,EAAIC,EAAqBC,GAC5BC,GACFC,QAAQJ,IAAI,yBAA2BC,EAAaC,GFsC9CmB,YAAAA,gCACNC,OAEMC,EAAOD,EAAIC,qBACVC,KAAKD,GAAME,iBAAQC,OAClBC,EAAQJ,EAAKG,GACfC,GAASA,EAAMC,QAAUD,EAAMC,kBAAkBC,WACnDN,EAAKG,GAAOC,EAAMC,SAASE,iBAKxBC,kBAAEC,GAAIV,EAAIU,QAGNC,YAAAA,kBAASC,aAEIrB,YADjB,IAAIsB,iBAAQC,MACKC,EAAKC,UAAUJ,UAE5BE,QAEHG,EAAaF,EAAKzB,GAAG2B,WAAWL,GAChCM,EAAaH,EAAKI,wBAAwBF,GAChDC,EAAWE,mBACRC,OACOC,EAAUD,EAAcE,KAAKC,aAChCxB,UACCe,EAAKhB,uBAAuBC,OAE3ByB,QAAQH,EAASV,aAMpBc,EAAe,YACnBT,OAFsB,cAItBC,OACAN,KAEGI,UAAUJ,GAAQc,IACnB,WAAY,MAAEd,IAAMc,mBAAqBX,EAAKC,kDAIxCW,YAAAA,2BAAkBC,cACvB,IAAIf,iBAASC,EAASe,GACXzC,cAAqB6B,WAAWW,GAG7CE,MACAhC,cAAKiC,GACAA,EAASC,OACXlB,EAAQ,QAENlB,EAAS,GACbmC,EAAS5B,iBAAQH,KACRiC,KAAKxB,kBAAEC,GAAIV,EAAIU,IAAOV,EAAIC,WAEnCa,EAAQlB,KAETsC,eAAMC,+CAMCC,YAAAA,oCACZC,EACAC,cAEO,IAAIzB,iBAASC,EAASe,OACrBU,EAAOD,EAAOrC,KAAP,KAAoBuC,cAC7BC,EAAYrD,cAEb6B,WAAWoB,GACXrC,IAAIuC,UACAD,EAAOrC,KAAP,KACKwC,EACTC,IAAIjC,iBACA6B,EAAOrC,MACV0C,WAAYvD,YAAmBwD,WAAWC,6BAC9BzD,YAAmBwD,WAAWC,+BAC5BzD,SAAgB0D,YAAYC,iBAC5B3D,SAAgB0D,YAAYC,mBAC1B3D,SAAgB0D,YAAYE,MAC5CC,eAAgB7D,SAAgB0D,YAAYE,SAE7ClD,gBACCgB,EAAQ,IAAMyB,MAEfL,eAAMC,+CAMCe,YAAAA,2BACZb,EACAC,cAEO,IAAIzB,iBAASC,EAASe,GACXzC,cAAqB6B,WAAWoB,GAE7Cc,IAAI1C,iBACA6B,EAAOrC,MACV0C,WAAYvD,YAAmBwD,WAAWC,6BAC9BzD,YAAmBwD,WAAWC,+BAC5BzD,SAAgB0D,YAAYC,iBAC5B3D,SAAgB0D,YAAYC,mBAC1B3D,SAAgB0D,YAAYE,MAC5CC,eAAgB7D,SAAgB0D,YAAYE,SAE7ClD,cAAKsD,GACJtC,EAAQ,CAAEJ,GAAI0C,EAAI1C,OAEnBwB,eAAMC,+CAMCkB,YAAAA,8BACZhB,EACAC,EACAC,cAEO,IAAI1B,iBAASC,EAASe,GACXzC,cAEb6B,WAAWoB,GACXrC,IAAIuC,GAEJG,IAAIjC,iBACA6B,EAAOrC,MACVqD,WAAYlE,YAAmBwD,WAAWC,+BAC5BzD,SAAgB0D,YAAYC,IAC1CQ,eAAgBnE,SAAgB0D,YAAYE,SAE7ClD,cAAKsD,GACJtC,EAAQ,IAAMyB,MAEfL,eAAMC,+CAMAqB,YAAAA,oBACXnB,EACAC,aAEgB/C,4BAAAkE,EAAKC,eAAerB,kBAA9BX,sBAqE6BY,EAAOqB,YAAc,2BAAzC,mCAAc,OACvBC,GAAaC,EAAO,GAAKC,QAMxB,MAJUxB,EAAOqB,WACpBI,EAAaC,MAAMJ,EAFPA,EAAYE,GAGxBC,QACUA,EAAa1E,YA1ErBY,EAAOyB,EAAEuC,OACyB3B,EAAO4B,MAAQ,4BAAvC,mCAAc,SACzBC,UACHlE,EACAmE,EACkC,OAAlCC,EAAMC,WAAW9B,cAAyB,MAAQ,UAEhD,aAAc,cAAEH,WAAwBX,SAAGY,QAE3CyB,EAAeN,EAAKc,YAAYtE,EAAMqC,EAAOkC,QAAU,qBAS5B,IAN7B,CACE,uBACA,oBACA,0BACA,sBACA,qBACAC,QAAQpC,QAGJqC,EADoBjB,EAAKc,YAAYtE,EAAMqC,EAAOkC,QAAU,IACfA,gBAChDG,UACKA,EAAKC,eAAiBxF,SAAgB0D,YAAYC,MAA0B,IAAnB4B,EAAKE,mCAOlDpB,EAAK9B,kBACvBU,EAAayC,QAAQ,QAAS,oBAD1BC,OAYAC,EATsBvB,EAAKc,YAAYQ,EAAOzC,EAAOkC,QAAU,IAAIA,gBACtEG,UACwB,IAAnBA,EAAKE,YAQVL,gBAAQG,UACoBD,EAAyBF,gBACjDS,UACKA,EAAIC,aAAeP,EAAKjE,KAOTrB,OAAS,IAMjCmC,aAAKxB,UACGS,iBAAKT,GAAKkF,WAAYlF,EAAIU,OAErCqD,EACKW,SACAM,8EAiBIG,YAAAA,mBACX9C,EACAC,WAEIrC,IAUYV,qBA4BZU,EAAKZ,OAAS,QACV,IAAI+F,MACR,+CAAiD9C,EAAO5B,UAGrD,CAAET,KAAMA,EAAKoF,4BAnCW,IAN7B,CACE,uBACA,oBACA,0BACA,sBACA,qBACAZ,QAAQpC,0BAEIiD,EAAK3D,kBAAkBU,kBAAjCX,GACJzB,EAAOyB,EAAE8C,gBAAQS,UAAwBA,EAAIvE,KAAO4B,EAAO5B,yBACvDT,EAAKZ,OAAS,yBACNiG,EAAK3D,kBAAkBU,EAAayC,QAAQ,QAAS,+BAE5DN,gBAAQS,UAAwBA,EAAIvE,KAAO4B,EAAO5B,KAClDc,aAAKxB,UACGS,iBAAKT,GAAKkF,WAAYlF,EAAIU,2EAGb,UAAjB2B,IAA6BC,EAAO5B,0BAC9B4E,EAAK5B,eAAerB,kBAA/BkD,KACGA,EAAGtB,KAAKO,gBACZS,UAAwBA,EAAIvE,KAAOtB,SAAgB0D,YAAYC,cAExC,YAAjBV,kBACMiD,EAAK3D,kBAAkB,wBAAlC4D,OACAC,EAAWD,EAAGf,gBACfS,UAAwBA,EAAIvE,KAAOtB,SAAgB0D,YAAYC,QAE3D,GACPyC,EAASrF,iBAAQH,GACfC,EAAKgC,KAAKxB,iBAAKT,GAAKU,GAAI4B,EAAO5B,0BAGlB4E,EAAK5B,eAAerB,kBAA/BkD,GACJtF,EAAOsF,EAAGtB,KAAKO,gBAAQS,UAAwBA,EAAIvE,KAAO4B,EAAO5B,0KAUxD+E,YAAAA,mBACXpD,EACAC,aAEgB/C,4BAAAmG,EAAKhC,eAAerB,kBAA9BX,YACF,YAAa,cAAEW,WAAwBX,SAAGY,oBAClCA,EAAOrC,KAAP,KACFyF,EAAKtD,2BAA2BC,EAAcC,GAC9CZ,EAAET,WAAWkC,IAAI1C,iBAClB6B,EAAOrC,MACV0C,WAAYvD,YAAmBwD,WAAWC,6BAC9BzD,YAAmBwD,WAAWC,+BAC5BzD,SAAgB0D,YAAYC,iBAC5B3D,SAAgB0D,YAAYC,mBAC1B3D,SAAgB0D,YAAYE,MAC5CC,eAAgB7D,SAAgB0D,YAAYE,wBAT5ChD,SAWC,CACLC,KAAMQ,iBACD6B,EAAOrC,MACVS,GAAIV,EAAIU,8CAKDiF,YAAAA,mBACXtD,EACAC,aAkBiB/C,oBAIb,YAAa,cAAE8C,WAAwBX,SAAGY,QAE1CsD,EAAYnF,iBACX6B,EAAOrC,MACVqD,WAAYlE,YAAmBwD,WAAWC,+BAC5BzD,SAAgB0D,YAAYC,mBAC1B3D,SAAgB0D,YAAYE,YAUf,IAN7B,CACE,uBACA,oBACA,0BACA,sBACA,qBACAyB,QAAQpC,UAEGX,EAAEuC,KAAKO,gBAAQS,UAAwBA,EAAIvE,KAAOA,IACtDrB,OAAS,KACTY,KAAP,WAA4BS,kBACFmF,EAAK3C,kBAAkBb,EAAcC,kBAAzDwD,0BACgBC,EAAGC,kBAAzBC,SACO,CACLhG,KAAMQ,iBACD6B,EAAOrC,SACVS,0BAIyBmF,EAAKxC,qBAChChB,EACAC,EACA5B,kBAHIwF,0BAKgBH,EAAGC,kBAAzBC,SACO,CACLhG,KAAMQ,iBACD6B,EAAOrC,SACVS,6BAqBC,MACCD,iBACDmF,MACHlF,yBAnBiB,YAAjB2B,yBAC2BwD,EAAKxC,qBAChC,QACAf,EACAlD,SAAgB0D,YAAYC,+BAGV,UAAjBV,GACT2D,EAAQtG,KAAKgB,GAAKA,kBACUqF,EAAGC,kBAAzBC,0BACyBvE,EAAET,WAAWjB,IAAIU,GAAIyF,OAAOP,0CAItBlE,EAAET,WAAWjB,IAAIU,GAAIyF,OAAOP,2GAjE3DlE,EAZHsE,EAAU,QACH,WACH,qFACLtG,KAAM,QACM2C,KACVjD,SAAgB0D,YAAYC,WAGxB,GAEArC,EAAK4B,EAAO5B,UACX4B,EAAOrC,KAAKS,SAEE,YAAjB2B,KACE,mBACWwD,EAAKlE,kBAAkB,2BAAtCD,EAAEuC,0BAEQ4B,EAAKnC,eAAerB,8FAuErB+D,YAAAA,uBACX/D,EACAC,qBAEOA,EAAOrC,KAAKS,mBACHnB,KAAKmE,eAAerB,kBAA9BX,KACF,gBAAiB,cAAEW,WAAwBX,SAAGY,YAC5C+D,EAAa,gBACdC,IAAM5F,OACTgB,EAAET,WAAWjB,IAAIU,GAAIyF,OAAO1F,iBACvB6B,EAAOrC,MACVqD,WAAYlE,YAAmBwD,WAAWC,+BAC5BzD,SAAgB0D,YAAYC,IAC1CE,eAAgB7D,SAAgB0D,YAAYE,SAE9CqD,EAAWpE,KAAKxB,iBACX6B,EAAOrC,SACVS,MAS6B,IAN7B,CACE,uBACA,oBACA,0BACA,sBACA,qBACA+D,QAAQpC,KAEGX,EAAEuC,KAAKO,gBAAQS,UAAwBA,EAAIvE,KAAOA,IACtDrB,OAAS,EAChBD,cAEG6B,WAAWoB,GACXc,IAAI1C,iBACA6B,EAAOrC,MACV0C,WAAYvD,YAAmBwD,WAAWC,+BAC5BzD,SAAgB0D,YAAYC,IAC1CwD,eAAgBnH,SAAgB0D,YAAYE,uBAK7C/B,WAAWoB,GACXrC,IAAIU,GACJyF,OAAO1F,iBACH6B,EAAOrC,MACVqD,WAAYlE,YAAmBwD,WAAWC,+BAC5BzD,SAAgB0D,YAAYC,IAC1CE,eAAgB7D,SAAgB0D,YAAYE,iBAxCrCV,EAAOkE,8BA6CjB,MACCH,yCAIGI,YAAAA,mBACXpE,EACAC,8BAEgB/C,KAAKmE,eAAerB,kBAA9BX,YACF,YAAa,cAAEW,WAAwBX,SAAGY,IAC9CZ,EAAET,WAAWjB,IAAIsC,EAAO5B,IAAIgG,SACrB,CACLzG,KAAMqC,EAAOqE,oDAIJC,YAAAA,uBACXvE,EACAC,aAEgB/C,4BAAAsH,EAAKnD,eAAerB,kBAA9BX,KACF,gBAAiB,cAAEW,WAAwBX,SAAGY,YAC5C+D,EAAa,GACbS,EAAQD,EAAKvH,GAAGwH,cACLxE,EAAOkE,oBAAK,CAAxBF,IAAM5F,OACToG,EAAMJ,OAAOhF,EAAET,WAAWjB,IAAIU,MACnBuB,KAAK,IAAEvB,WAEpBoG,EAAMC,SACC,MAAQV,yCAGJW,YAAAA,oBACX3E,EACAC,aAeY/C,wBAWL,MACC0H,OAvBJA,EADET,EAAM,IAAIU,IAAI5E,EAAOkE,QAUI,IAN7B,CACE,uBACA,oBACA,0BACA,sBACA,qBACA/B,QAAQpC,mBAEA8E,EAAKxF,kBAAkBU,qBACjC4E,IAAYzC,gBAAOG,UAAQ6B,EAAIY,IAAIzC,EAAI,0BACnCsC,EAAQ5H,OAAS,yBACT8H,EAAKxF,kBAAkBU,EAAayC,QAAQ,QAAS,uBAC/DmC,IAAYzC,gBAAOG,UAAQ6B,EAAIY,IAAIzC,EAAI,sEAG/BwC,EAAKzD,eAAerB,yBAClB4B,KAAKO,gBAAOG,UAAQ6B,EAAIY,IAAIzC,EAAI,2EAQnC0C,YAAAA,6BACXhF,EACAC,WAEIrC,IAcWV,qBAYI,MAAf+C,EAAO4B,KAAc,OACE5B,EAAO4B,OAEzBC,UAAUlE,UADH,gBACgB,MAEA,YAG1B2D,GAAatB,EAAOqB,WAAWE,KAAO,GAAKvB,EAAOqB,WAAWG,cAK5D,MAFUmD,EAAQjD,MAAMJ,EAFfA,EAAYtB,EAAOqB,WAAWG,eAGhCmD,EAAQ5H,YAnClB4H,EAFEK,EAAchF,EAAOiF,OACrBC,EAAclF,EAAO5B,MAUI,IAN7B,CACE,uBACA,oBACA,0BACA,sBACA,qBACA+D,QAAQpC,mBAEGoF,EAAK9F,kBAAkBU,qBACpC4E,QAAezC,gBAAOS,UAAOA,EAAIqC,KAAiBE,wBAC9CP,EAAQ5H,OAAS,yBACNoI,EAAK9F,kBAAkBU,EAAayC,QAAQ,QAAS,uBAClEmC,QAAezC,gBAAOS,UAAOA,EAAIqC,KAAiBE,oEAGtCC,EAAK/D,eAAerB,kBAA9BX,GAEJuF,GADAhH,EAAOyB,EAAEuC,MACMO,gBAAOS,UAAOA,EAAIqC,KAAiBE,yEAmB/CE,YAAAA,qBAAYrF,UACV9C,KAAKmE,eAAerB,IAGrB8B,YAAAA,mBAAUlE,EAAiBmE,EAAeuD,KAC3CzD,cAAM0D,EAAOC,OACVC,EAASF,EAAExD,GAASwD,EAAExD,GAAOE,WAAW9B,cAAgB,GACxDuF,EAASF,EAAEzD,GAASyD,EAAEzD,GAAOE,WAAW9B,cAAgB,UAC1DsF,EAASC,EACI,QAARJ,GAAiB,EAAI,EAE1BG,EAASC,EACI,QAARJ,EAAgB,GAAK,EAEvB,KAIHpD,YAAAA,qBACNtE,EACA+H,MAvmB4B,MAAvBC,KAAKC,UAymBKF,UACN/H,EA3mBb,IA6mBUkI,EAAa1H,OAAOP,KAAK8H,UACxB/H,EAAKuE,gBAAOG,UACjBwD,EAAWC,gBAAQC,EAAiBC,OAC5BC,EAAkBP,EAAaM,GAAW9F,cAC1CgG,EAAiB7D,EAAK2D,MACN,MAAlBE,SACK,MAEHC,EAAmBD,EACtBhG,cACAkG,SAASH,UACLF,GAAmBI,IACzB,MAIOhH,YAAAA,iBACZH,EACAe,8BAEuB9C,KAAKmE,eAAerB,kBAArCsG,GACNA,EAAS1E,KAAO3C,wCAGVoC,YAAAA,wBAAerB,OACfsG,EAAsBpJ,KAAKyB,UAAUqB,OACtCsG,QACG,IAAIvD,oDACsC/C,cAG3CsG,GAGDxH,YAAAA,iCACNF,UAII2H,aAAWC,gBAAQC,UAAkB7H,EAAW8H,WAAWD,ME1pBnE,IAAIjK,GAAU,EAGRmK,EAKJ/J,SAAYC,GACVR,EAAI,qCAIGS,IAHFC,OAAcC,OAGND,QAFAA,gBAAuBF,QAI/B+J,KAAO7J,cACVE,GAAKC,KAAKJ,IAAIK,aAGZ0J,YAAAA,yBAAgB5G,aAKC/C,sCAHrBT,QAAQJ,IAAI,6CAEdI,QAAQJ,IAAI,2DACWqC,EAAKkI,KAAKE,2BAC3BC,EACAC,kBAFIC,KAIL,8CAA+C,MAAEA,0BAI9C,uCAAwC,QAAEhH,IACxC,IAAI8C,MAAM,0EAIdmE,YAAAA,0BAAiBjH,cACxBxD,QAAQJ,IAAI,oCACHa,KAAK0J,KAAKO,kEAGZC,YAAAA,yBAAgBnH,KAEhBoH,YAAAA,yBAAgBpH,aAEC/C,gDAAA+F,EAAKqE,8BAAlBL,KACF,2CAA4C,MAAEA,IAClDxK,QAAQJ,IAAI,2CAA4C,MAAE4K,gBACnDzJ,YACH,oBAAqB,GAAEA,IAC3Bf,QAAQJ,IAAI,oBAAqB,GAAEmB,IAC5BgB,QAAQgB,+CAIb8H,YAAAA,kCAEFpK,YADK,IAAIsB,iBAASC,EAASe,KACtBoH,KAAKW,4BAAmBN,GACvBA,EACFxI,EAAQwI,GAERzH,EAAO,8DAMTgI,YAAAA,oCAEFtK,YADK,IAAIsB,iBAASC,EAASe,KACtBoH,KAAKW,4BAAmBN,GACvBA,EACMlK,cAAqB6B,WAAW,SAASjB,IAAIsJ,EAAKvG,KAAO,IAClDjB,MACpBhC,cAAKE,GAILc,EAHGd,EAAI8J,QAGC9J,EAAIC,OAAO8J,QAAQ,QAFnB,UAKR7H,eAAMC,WACAzD,IAAI,yBAA0ByD,UAIrCrD,QAAQJ,IAAI,yBACZoC,EAAQ,kDAOJkJ,YAAAA,4BAAmBhH,cAChB,IAAInC,iBAASC,EAASe,GACjBzC,cAAqB6B,WAAW,SAASjB,IAAIgD,GACtClB,MAClBhC,cAAKE,OACFA,EAAI8J,QAGC9J,EAAIC,OAAO8J,WAGnB7H,eAAMC,WACAzD,IAAI,yBAA0ByD,+ECtFzB8H,EAAcjE,UACrBkE,WApCeD,EAAcjE,mBAAamE,EAAMxB,EAAUrG,QAE7D0D,IAAWoE,MAAMC,QAAQrE,EAAQsE,QAAWtE,EAAQsE,MAAM5B,SAASC,OAInE3C,GAAWoE,MAAMC,QAAQrE,EAAQuE,YAAcvE,EAAQuE,UAAU7B,SAASC,UAMvE,CACLvH,mBAAU0H,OAEF0B,EADczL,EAAG2I,YAAYiB,GACXzH,WAAWE,qBACjC6I,EAAaE,EAAMxB,EAAUrG,GAC1BxC,cAAK2K,UAAW3B,EAAS4B,KAAKD,KAC9BvI,eAAMyI,UAAS7B,EAAS6B,MAAMA,aAGd,CACnBC,uBACEJ,EAAII,mBAaQC,CAAeZ,EAAcjE,qCH6oBV8E,OAClCA,QACG,IAAI1F,MACR,kFAGJvG,EAAUiM,EAAM,MAChB/L,EAAK,IAAIC,EAAe8L,YAEtBX,EACA9H,EACAC,8BAEMvD,EAAG4B,SAAS0B,2BACV8H,QACDY,kBACIhM,EAAGiI,WAAW3E,EAAcC,QAChC0I,4BACIjM,EAAGsI,oBAAoBhF,EAAcC,QACzC2I,kBACIlM,EAAGyE,WAAWnB,EAAcC,QAChC4I,iBACInM,EAAGoG,UAAU9C,EAAcC,QAC/B6I,gBACIpM,EAAG0G,UAAUpD,EAAcC,QAC/B8I,gBACIrM,EAAG4G,UAAUtD,EAAcC,QAC/B+I,qBACItM,EAAGqH,cAAc/D,EAAcC,QACnCgJ,gBACIvM,EAAG0H,UAAUpE,EAAcC,QAC/BiJ,qBACIxM,EAAG6H,cAAcvE,EAAcC,iBAE/B,kEEjlBf,SAAmBwI,OACZA,QACG,IAAI1F,MACR,2EAGJvG,EAAUiM,EAAM,UACV7B,EAAO,IAAID,EAAW8B,mBAENX,EAAc7H,cAClC5D,EAAI,eAAgB,MAAEyL,SAAM7H,IAGlB6H,QACDqB,oCACGvC,EAAKC,gBAAgB5G,4BACxBmJ,qCACGxC,EAAKM,iBAAiBjH,4BACzBoJ,oCACGzC,EAAKQ,gBAAgBnH,4BACxBqJ,oCACG1C,EAAKS,gBAAgBpH,4BACxBsJ,8CACU3C,EAAKY,gCAEZ,IAAIzE,MAAM,uBAAyB+E"}